# a re-implementation of the quantseqPool analysis.sh 
configfile: "config.yaml"
working_dir = config['working_dir']
data_dir = config['bulk_rna_data_dir']
star_genome_dir = config['star_genome']
sample_sheet = config['sample_sheet']

import pandas as pd
SAMPLES = pd.read_csv(sample_sheet).iloc[:,0]

shell("conda config --add envs_dirs /home/cachris/miniconda3/envs")

rule all:
    input:
        expand(working_dir + "dedup_bams/{sample}/Aligned.sortedByCoord.out.bam",sample = SAMPLES)

rule demux:
    input:
        r1 = data_dir + "/TSHG12/combined_R1.fastq.gz",
        r2 = data_dir + "/TSHG12/combined_R2.fastq.gz",
        samples = data_dir + "sample_sheet.csv",
    output:
        stats = working_dir + "demux_fastqs/demultipexing_stats.tsv",
        dirr = working_dir + "demux_fastqs",
        for_all = expand(working_dir + "demux_fastqs/{sample}_R1.fastq.gz", sample= SAMPLES),
        for_all2 = expand(working_dir + "demux_fastqs/{sample}_R2.fastq.gz", sample= SAMPLES)
    log: 
        working_dir + "logs/idemux.log",
    threads:
        10
    shell:
        "idemux --r1 {input.r1} --r2 {input.r2}  --sample-sheet {input.samples}  --out {output.dirr}  > {log} 2>&1"

rule UMI_extract:
    input:
     #   for_all = expand(working_dir + "demux_fastqs/{sample}_R1.fastq.gz", sample = SAMPLES),
        r1 = working_dir + "demux_fastqs/{sample}_R1.fastq.gz",
        r2 = working_dir + "demux_fastqs/{sample}_R2.fastq.gz"
    output:
    #    for_all = expand(working_dir + "extracted_fastqs/{sample}.R1.fastq.gz", sample= SAMPLES),
        r1 = working_dir + "extracted_fastqs/{sample}.R1.fastq.gz"
    log:
        working_dir + "logsUMI_extract/{sample}.log"
    shell:
        """
        umi_tools extract \
        --extract-method=string --bc-pattern X  \
        --bc-pattern2 NNNNNNNNNN \
        -L {log} \
        -S {output.r1} \
        -I {input.r1} \
        --read2-in={input.r2} \
        --read2-out=/dev/null 
        """

rule cutadapt:
    input:
        r1 = working_dir + "extracted_fastqs/{sample}.R1.fastq.gz",
    output:
        r1 = working_dir + "trimmed_fastqs/{sample}.R1.fastq.gz",
    log: 
        out = "{sample}_stdout.log",
        err = "{sample}_stderr.err"
    shell:
        """
        cutadapt -m 20 -O 20 -a "polyA=A{{20}}" \
        -a "QUALITY=G{{20}}" -n 2 /home/cachris/geneva/hypoxia/extracted_fastqs/SW620.R1.fastq.gz 2>>{log.err} | \
        cutadapt  -m 20 -O 3 \
        --nextseq-trim=10  \
        -a "r1adapter=A{{18}}AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC;min_overlap=3;max_error_rate=0.100000" - \
        | cutadapt -m 20 -O 3 \
        -a "r1polyA=A{{18}}" - | \
        cutadapt -m 20 -O 20 \
        -g "r1adapter=AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC;min_overlap=20" \
        --discard-trimmed -o /home/cachris/geneva/hypoxia/trimmed_fastqs/SW620.R1.fastq.gz  - 2> {log.err} 1> {log.out}
        """

rule star_se:
    input:
        fq1 = working_dir + "trimmed_fastqs/{sample}.R1.fastq.gz", 
        # path to STAR reference genome index
        idx="/home/genomes/cellranger_refs/refdata-gex-GRCh38-2020-A/star",
    output:
        # see STAR manual for additional output files
        aln = working_dir + "star/{sample}/Aligned.sortedByCoord.out.bam",
        log = working_dir + "star/{sample}/Log.out",
        log_final = working_dir + "star/{sample}/Log.final.out", 
    params:
        out_prefix = working_dir + "star/{sample}/",
    log:
        working_dir + "logs/star/{sample}.log",
    threads: 10
    conda:
        "quantseq"
    shell:
        """
        STAR \
        --runThreadN 10 \
        --genomeDir {input.idx} \
        --readFilesIn {input.fq1} \
        --readFilesCommand zcat \
        --outSAMtype BAM SortedByCoordinate \
        --outFilterType BySJout \
        --outFilterMultimapNmax 200 \
        --alignSJoverhangMin 8 \
        --alignSJDBoverhangMin 1 \
        --outFilterMismatchNmax 999 \
        --outFilterMismatchNoverLmax 0.6 \
        --alignIntronMin 20 \
        --alignIntronMax 1000000 \
        --alignMatesGapMax 1000000 \
        --limitOutSJcollapsed 5000000 \
        --outSAMattributes NH HI NM MD \
        --outFileNamePrefix {params.out_prefix} > {log}       
        """



rule index:
    input:
        bam = working_dir + "star/{sample}/Aligned.sortedByCoord.out.bam",
    output:
        bai = working_dir + "star/{sample}/Aligned.sortedByCoord.out.bam.bai",
    params:
        new_dir = working_dir + "dedup_bams/{sample}/"
    threads:
        1
    conda:
        "quantseq"
    shell:
        """
        samtools index -@ {threads} {input.bam} \
        && mkdir {params.new_dir}
        """


rule dedup:
    input:
        bam = working_dir + "star/{sample}/Aligned.sortedByCoord.out.bam",
        bai = working_dir + "star/{sample}/Aligned.sortedByCoord.out.bam.bai",
    output:
        bam = working_dir + "dedup_bams/{sample}/Aligned.sortedByCoord.out.bam",
       # stats = working_dir + "dedup_bams/{sample}/deduplicated.txt",
    params:
        stats = working_dir + "dedup_bams/{sample}/deduplicated.txt",
    log:
        working_dir + "logs/dedup/{sample}.log",
    conda:
        "quantseq"
    shell:
        """
        umi_tools dedup \
        -I {input.bam} \
        -S {output.bam} \
        --multimapping-detection-method=NH \
        --output-stats={params.stats} \
        > {log} 2>&1 
        """
